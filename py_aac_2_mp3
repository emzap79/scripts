#!/usr/bin/python

########################################################################################################################
# This program is used to convert *.m4a files to the mp3 file format. It recursively searches for all m4a files below a root directory (ie, current working directory)
########################################################################################################################
# Author (python file): B. Fletcher - Aug 13th, 2006 - fletc900 at hotmail dot com; Bash file: dmartin(?)
# License: GPL - http://www.gnu.org/licenses/gpl.txt
########################################################################################################################
# Dependencies:

#mplayer-386, faad, lame, libfaad2-0, id3v2, aac2mp3.txt

########################################################################################################################
# Ubuntu Instalation:

# Download packages: 
# 1 - sudo apt-get install mplayer-386 faad lame libfaad2-0 id3v2
# 2 - Extract all files to a temporary folder and cd to that directory
# 3 - Move the bash & python script to the bin folder:
#     sudo mv aac2mp3.txt /usr/local/bin/aac2mp3
#     sudo mv py_aac_2_mp3 /usr/local/bin/py_aac_2_mp3
# 4 - Make these files executable:
#     sudo chmod +x /usr/local/bin/aac2mp3
#     sudo chmod +x /usr/local/bin/py_aac_2_mp3
########################################################################################################################
# Usage:

# 1- From the prompt cd to the base directory where all the m4a files are located
# 2- type py_aac_2_mp3 to recursively search and convert all m4a files to mp3 within this directory


#* options: type py_aac_2_mp3 --help to see available runtime options 

# Have fun...
########################################################################################################################




import fnmatch, os, string, re, sys, time
list_of_run_argvs = sys.argv

if (len(list_of_run_argvs) > 2):
    print "ERROR!"
    print "py_aac2_2_mp3 takes only 1 argument (optional)"
    print "Exiting..."
    sys.exit()
if (len(list_of_run_argvs) == 2):
    if (list_of_run_argvs[1] == "--delete_m4a"):
        print "WARNING:"
        print "Are you sure you want to delete your m4a files after the conversion?"
        print "This process is irreversible!"
        option = raw_input("Type 'Yes' to delete all m4a files after they have been converted...")
        if (option != 'Yes'):
            print "Ok...exiting!"
            sys.exit()
        else:
            print "Ok! You have been warned! All *.m4a files will be deleted once they are converted to the mp3 format!"
            print "You can hit CTRL-Z to eject @ anytime :)"
            time.sleep(5)
        pass
    elif (list_of_run_argvs[1] == "--help"):
        print "use --delete_m4a argument to delete the *.m4a file after it has been converted to the *.mp3 format"
        sys.exit()
    else:
        print "Invalid argument. Use --help to see argument options."
        sys.exit()
        

def Walk( root, recurse=0, pattern='*', return_folders=0 ):

	
	# initialize
	result = []

	# must have at least root folder
	try:
		names = os.listdir(root)
	except os.error:
		return result

	# expand pattern
	pattern = pattern or '*'
	pat_list = string.splitfields( pattern , ';' )
	
	# check each file
	for name in names:
		fullname = os.path.normpath(os.path.join(root, name))

		# grab if it matches our pattern and entry type
		for pat in pat_list:
			if fnmatch.fnmatch(name, pat):
				if os.path.isfile(fullname) or (return_folders and os.path.isdir(fullname)):
					result.append(fullname)
				continue
				
		# recursively scan other folders, appending results
		if recurse:
			if os.path.isdir(fullname) and not os.path.islink(fullname):
				result = result + Walk( fullname, recurse, pattern, return_folders )
			
	return result

if __name__ == '__main__':
	# test code
	print '\nSearching for *.m4a files:'
	files = Walk('.', 1, '*.m4a', 1)
	print 'There are %i *.m4a files below current location.' %(len(files))
        comma_in_file_name = []  # list of *.m4a files that have a comma character in their filenames

        # Checking if there are commas within the filenames:
	for file in files:
                file = os.getcwd() +'/' + file
		if ("," in file):
                    comma_in_file_name.append(file)
                else:
                    pass
        if (len(comma_in_file_name) > 0):
            print "\n*WARNING:\n"
            print "Some *.m4a files have a comma (',') character within their filenames. Lame doesn't seem to like converting files with this character."
            rename_file_flag = ''
            valid_option     = ''
            rename_file_flag = raw_input("Type 'Yes' if you would like to delete the comma (',') character from the filename or 'No' to maintain the current filename: ")
            if ((rename_file_flag == "Yes") or (rename_file_flag == "No")):
                valid_option = "yes"

            # is the user's option valid?
            while (valid_option != "yes"):
                print "Sorry: uknown option! You typed in:", rename_file_flag
                rename_file_flag = raw_input("Type 'Yes' if you would like to delete the comma (',') character from the filename or 'No' to maintain the comma(',') character: ")
                if ((rename_file_flag == "Yes") or (rename_file_flag == "No")):
                    valid_option = "yes"

            # Start renaming the files
            if(rename_file_flag == "Yes"):
                for file in comma_in_file_name:
                    new_filename_list = file.split(',')
                    new_filename = ''
                    for name in new_filename_list:
                        new_filename = new_filename + name
                        
               
                    #new_filename = re.subn(' ', r'\ ', new_filename)
                    #print "Renaming:", file, r"TO:\n", new_filename

                    try:
                        os.rename(file,new_filename)
                    except:
                        print "Cant convert ", name
                        print "To ", new_filename
                        sys.exit()


            
        
            else:
                pass



        print "Starting file conversion..."
        
        ## obtain new filename list (since we renamed some files):
        error_list = []
        files = Walk('.', 1, '*.m4a', 1)
        for file in files:
                dummy_var = file
                file = '"' + os.getcwd() +'/' + file +'"'
                print "converting ", file, "to *.mp3..."
                err_var = os.system("aac2mp3 %s" %(file))
                if (err_var != 0):
                        print "Error encountered while converting current file to mp3!"
                        error_list.append(file)
                else:
                    try:
                        if (list_of_run_argvs[1] == "--delete_m4a"):
                            print "Deleting current *.m4a file!"
                            os.remove(dummy_var)
                    except:
                        pass # Don't delete m4a file
                    
        if (len(error_list) > 0):
		print "\nWARNING:"
                print "\n*Errors were encountered while trying to convert the following files:\n"
                for i in error_list:
                        print i
        print "\nDone :)"

