#!/bin/bash
# vim:fdm=marker

# Configuration.# {{{

out="foobar`date +%F`"
if [ "$1" = "" ]; then
    echo "usage: $0 name_of_file.pdf"
    exit 0
fi
size_old=$(ls -s "$1" | cut -d ' ' -f 1)
size_old_hs=$(ls -hs "$1" | cut -d ' ' -f 1) # Human Readable Size

#.Configuration.# }}}
# Dialoge.# {{{

read -p "do you need your PDF to be scaled to a specific page size? (Y|n) " answer
case $answer in
    Yes|yes|Y|y|"")
        PS3="Enter desired pagesize: "
        selOptions=("A3" "A4" "legal")
        select opt in "${selOptions[@]}" "No pagesize at all: <None>"; do
            case "$REPLY" in
                1 ) echo "You chose $REPLY: $opt"
                    fitformat=yes
                    pagescale="a3"
                    ;;
                2 ) echo "You chose $REPLY: $opt"
                    fitformat=yes
                    pagescale="a4"
                    ;;
                3 ) echo "You chose $REPLY: $opt"
                    fitformat=yes
                    pagescale="legal"
                    ;;
                $(( ${#selOptions[@]}+1 )) )
                    echo "Ok buddy, only resize then!"
                    echo ""
                    fitformat=no
                    ;;
                *) echo "#N/A... no valid option";continue
                    ;;
            esac; break
        done
        ;;
    No|no|N|n)
        fitformat=no
        ;;
esac

read -p "would you like your output file to be B/W? (Y|n) " answer
case $answer in
    Yes|yes|Y|y|"")
        togray=yes
        ;;
    No|no|N|n)
        togray=no
        ;;
esac

echo "define the pdfs output resolution (recommended: medium)"
read -p "(low=l|medium=m|high=h|best=b) " answer
case $answer in
    l)
        qual='/screen'
        col='/sRGB'
        ;;
    m)
        qual='/ebook'
        col='/sRGB'
        ;;
    h)
        qual='/printer'
        col='/sRGB'
        #col='/UseDeviceIndependentColor'
        ;;
    b)
        qual='/prepress'
        col='/LeaveColorUnchanged'
esac

###.Dialoge.# }}}
# Backup.File.# {{{

echo ""
echo "copy $1 to /tmp/$$.pdf"
cp "$1" /tmp/$$.pdf
echo "done"
sleep 1

###.Backup.File.# }}}
# Fit to pagescale # {{{

if [[ $fitformat == "yes" ]]; then
    # Ausgabe
    echo ""
    echo -n "pdf gets scaled into size $pagescale..."
    # Starte Ghostscript
    gs\
        -sDEVICE=pdfwrite\
        -dFIXEDMEDIA\
        -dPDFFitPage\
        -dCompatibilityLevel=1.4\
        -sPAPERSIZE=$pagescale\
        -o $out $1
fi

###.Fit to A4-Format.# }}}
# Convert PDF to Grayscale.# {{{

# http://handyfloss.net/2008.09/making-a-pdf-grayscale-with-ghostscript/
if [[ $togray == "yes" ]]; then
gs \
    -sDEVICE=pdfwrite \
    -sColorConversionStrategy=Gray \
    -dProcessColorModel=/DeviceGray \
    -dCompatibilityLevel=1.4 \
    -dNOPAUSE \
    -dBATCH \
    -sOutputFile="$out"_grayscale.pdf $out
fi

###.Convert PDF to Grayscale.# }}}
# Resizing.PDF.#1.# {{{

echo ""
echo "$1 resize with ghostscript"
gs\
    -sDEVICE=pdfwrite\
    -dCompatibilityLevel=1.4\
    -dPDFSETTINGS="$qual"\
    -dNOPAUSE\
    -dQUIET\
    -dColorConversionStrategy="$col"\
    -dBATCH\
    -sOutputFile="$out" "$1"

size_new=$(ls -s "$out" | cut -d ' ' -f 1)

###.Resizing.PDF.#1.# }}}
# Resizing.PDF.#2.# {{{

if [ "$size_old" -le "$size_new" ]; then
    echo "start second intent ... "
    pdftops "$1" "bar.ps"
    # pdf2ps "$1" "bar.ps"
    pstopdf "bar.ps" "$out"
    # ps2pdf "bar.ps" "$out"
    rm bar.ps
    size_new=$(ls -s "$out" | cut -d ' ' -f 1)
    if [ "$size_old" -le "$size_new" ]; then
        echo "sorry, couldn't resize $1"
        rm $out
        exit 1;
    fi
fi

###.Resizing.PDF.#2.# }}}
# Final Output.# {{{

size_new_hs=$(ls -hs "$out" | cut -d ' ' -f 1)
mv "$out" "$1"
echo ""
echo "`basename "$1"`... resized from $size_old_hs to $size_new_hs!"

###.Final Output.# }}}
# Annotations#{{{

#-dPDFSETTINGS=configuration to presets the "distiller parameters" to one of four
#predefined settings:

#/screen selects low-resolution output similar to the Acrobat Distiller "Screen Optimized" setting.
#/ebook selects medium-resolution output similar to the Acrobat Distiller "eBook" setting.
#/printer selects output similar to the Acrobat Distiller "Print Optimized" setting.
#/prepress selects output similar to Acrobat Distiller "Prepress Optimized" setting.
#/default selects output intended to be useful across a wide variety of uses, possibly at the expense of a larger output file.

# EOF#}}}
